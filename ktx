#!/usr/bin/env bash

# Author: Deac Karns
# Date: 10/09/2024
# Description: A simple script to switch between kubectl contexts and versions, and to download new versions of kubectl.

red=$(tput setaf 1)
gold=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
default=$(tput sgr0)

bin_dir=$HOME/.kube/kubectl/bin

symlink_dir=.kube/kubectl
symlink_path=$HOME/$symlink_dir

echo "██╗  ██╗████████╗██╗  ██╗"
echo "██║ ██╔╝╚══██╔══╝╚██╗██╔╝"
echo "█████╔╝    ██║    ╚███╔╝ "
echo "██╔═██╗    ██║    ██╔██╗ "
echo "██║  ██╗   ██║   ██╔╝ ██╗"
echo "╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝"
echo -e "${gold}Kubectl Context Switcher\n\n${default}"

function check_dependencies() {
  if ! command -v jq &> /dev/null; then
    echo -e "${red}Error: jq is required but not installed.${default}"
    echo -e "${cyan}Please install jq to use this script:${default}"
    echo -e "${cyan}  macOS: brew install jq${default}"
    echo -e "${cyan}  Ubuntu/Debian: sudo apt-get install jq${default}"
    echo -e "${cyan}  CentOS/RHEL: sudo yum install jq${default}"
    kill -INT $$
  fi
}

function verify_path() {
  if [[ ":$PATH:" != *":$symlink_path:"* ]]; then
    echo -e "${red}The directory $symlink_path is not in your PATH.${default}"
    echo -e "${gold}You need to add the following to your PATH:\n - ${magenta}\$HOME/$symlink_dir${default}"

    kill -INT $$
  fi
}

function verify_symlink() {
  if [ ! -L $symlink_path/kubectl ]; then
    echo -e "${red}kubectl symlink does not exist. \nLets get you a version of kubectl${default}"
    kubectl_manage
    kill -INT $$
  fi
}

function switch_context() {

  CONTEXTS=( $(kubectl config get-contexts | awk 'NR!=1''{print $2}') )

  echo -e "\n${gold}Select context to switch to:${default}"
  PS3="${cyan}Select a kubectl context: $gold"
  select context in "${CONTEXTS[@]}"; do
    case "$context" in
      "")
        echo "${red}Invalid Option ${magenta}CTL + C to quit${default}"
      ;;
      *)
        kubectl config use-context $context > /dev/null
        echo "${gold}Kubectl Context switched to ${magenta}$context${default}"
        break
      ;;
    esac
  done
}

function kubectl_manage() {
  # Get list of already installed versions
  local installed_versions=()
  if [ -d "$bin_dir" ] && [ "$(ls -A $bin_dir 2>/dev/null)" ]; then
    local files=("$bin_dir"/*)
    for file in "${files[@]}"; do
      if [ -f "$file" ]; then
        installed_versions+=("${file##*/}")
      fi
    done
  fi

  # Display installed versions if any exist
  if [ ${#installed_versions[@]} -gt 0 ]; then
    echo -e "\n${gold}Currently installed kubectl versions:${default}"
    for version in $(printf '%s\n' "${installed_versions[@]}" | sort -V -r); do
      # Check if this version is currently active
      if [ -L "$symlink_path/kubectl" ]; then
        current_version=$(readlink "$symlink_path/kubectl")
        current_version=${current_version##*/}
        if [[ "$version" == "$current_version" ]]; then
          echo -e "  ${magenta}$version${default} ${cyan}(active)${default}"
        else
          echo -e "  ${magenta}$version${default}"
        fi
      else
        echo -e "  ${magenta}$version${default}"
      fi
    done
    echo ""
  fi

  # Fetch available versions from GitHub
  echo -e "${cyan}Fetching available kubectl versions...${default}"
  local online_releases=$(curl -s --max-time 10 "https://api.github.com/repos/kubernetes/kubernetes/releases?per_page=30" | \
    jq -r '.[] | select(.prerelease == false) | .tag_name' 2>/dev/null | \
    head -10 | \
    sort -V -r)

  # Build the selection menu
  local options=()
  local option_types=()

  # Add installed versions for switching
  if [ ${#installed_versions[@]} -gt 0 ]; then
    options+=("=== SWITCH TO INSTALLED VERSION ===")
    option_types+=("header")
    for version in $(printf '%s\n' "${installed_versions[@]}" | sort -V -r); do
      options+=("$version")
      option_types+=("installed")
    done
  fi

  # Add online versions
  if [[ -n "$online_releases" ]]; then
    options+=("=== DOWNLOAD NEW VERSIONS ===")
    option_types+=("header")
    while IFS= read -r version; do
      # Check if this version is already installed
      version_clean=${version#v}
      if [[ ! " ${installed_versions[@]} " =~ " v${version_clean} " ]]; then
        options+=("$version")
        option_types+=("download")
      fi
    done <<< "$online_releases"
  fi

  # Add manual entry option
  options+=("=== OTHER OPTIONS ===")
  option_types+=("header")
  options+=("Enter custom version")
  option_types+=("custom")

  if [ ${#options[@]} -eq 0 ]; then
    echo "${red}No kubectl versions found. Please check your setup.${default}"
    kill -INT $$
  fi

  echo -e "${gold}Select kubectl version to use or download:${default}"
  PS3="${cyan}Select version: $gold"
  select opt in "${options[@]}"; do
    case "$opt" in
      "")
        echo "${red}Invalid Option ${magenta}CTL + C to quit${default}"
        ;;
      "=== SWITCH TO INSTALLED VERSION ===" | "=== DOWNLOAD NEW VERSIONS ===" | "=== OTHER OPTIONS ===")
        echo "${cyan}Please select a specific version${default}"
        ;;
      "Enter custom version")
        read -p "${cyan}Enter the kubectl version to get (e.g., 1.29.0): ${default}" custom_version
        # Validate custom version format
        if [[ ! "$custom_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "${red}Invalid version format. Please use format like: 1.29.0${default}"
          continue
        fi
        version="v${custom_version}"
        action="download"
        break
        ;;
      *)
        # Determine if this is an installed version or download version
        if [[ " ${installed_versions[@]} " =~ " ${opt} " ]]; then
          version="$opt"
          action="switch"
        else
          version="$opt"
          action="download"
        fi
        break
        ;;
    esac
  done

  version_clean=${version#v}

  if [[ "$action" == "switch" ]]; then
    # Switch to already installed version
    echo "kubectl set to version: ${magenta}$version${default}"
    ln -nsf $bin_dir/$version $symlink_path/kubectl
    echo -e "${gold}kubectl $version is now active!${default}"
    return
  fi

  # Download new version
  echo "${magenta}You have selected kubectl version: ${version}${default}"

  if [[ $(uname -m) == "x86_64" ]]; then
    echo "${cyan}Detected architecture: amd64${default}"
    arch="amd64"
  elif [[ $(uname -m) == "arm64" ]]; then
    echo "${cyan}Detected architecture: arm64${default}"
    arch="arm64"
  else
    echo "${red}Unsupported architecture. Use amd64 or arm64${default}"
    kill -INT $$
  fi

  if [[ $(uname) == "Darwin" ]]; then
    echo "${cyan}Detected OS: macOS${default}"
    os="darwin"
  elif [[ $(uname) == "Linux" ]]; then
    echo "${cyan}Detected OS: Linux${default}"
    os="linux"
  else
    echo "${red}Unsupported OS. Use Mac or Linux${default}"
    kill -INT $$
  fi

  mkdir -p $bin_dir

  echo -e "${cyan}Downloading kubectl version: ${magenta}${version}${default}"

  # Check if download is successful
  if curl -Ls --max-time 30 "https://dl.k8s.io/release/v${version_clean}/bin/${os}/${arch}/kubectl" -o $bin_dir/v${version_clean}; then
    echo -e "${cyan}Download successful!${default}"
  else
    echo "${red}Download failed. Please check the version and try again.${default}"
    rm -f $bin_dir/v${version_clean}
    kill -INT $$
  fi

  echo -e "${cyan}Creating symlink to kubectl version: ${magenta}${version}${default}"
  ln -nsf $bin_dir/v${version_clean} $symlink_path/kubectl

  echo -e "${cyan}Setting execute permissions for kubectl${default}"
  chmod +x $symlink_path/kubectl

  echo -e "${gold}kubectl ${version} has been successfully installed and is now active!${default}"
}

function kubectl_pull() {

  # this is the "folder" in lastpass
  NAMESPACE="kubernetes-configs"

  IDS=$(lpass show -xjG '.*' | jq --raw-output '.[] | select( .group == "'$NAMESPACE'" ) | select(.url != "http://group" ) | .id')

  echo -e "\n${cyan}Creating the following kube config files in ${magenta}$HOME/.kube${cyan}:${default}\n"

  for ID in $IDS
  do
    NAME=$(lpass show $ID --name)
    printf "%-40s %s\n" "$NAME" "${magenta}$ID${default}"
    CONFIG="$(lpass show $ID --notes)"

    echo "$CONFIG" > $HOME/.kube/config-$NAME
  done
}

check_dependencies
verify_path
verify_symlink

PS3="${cyan}Select an option: $gold"
options=("Switch context" "Manage kubectl versions" "Get config from lastpass")
select opt in "${options[@]}"; do
  case $opt in
    "Switch context")
      switch_context
      break
      ;;
    "Manage kubectl versions")
      kubectl_manage
      break
      ;;
    "Get config from lastpass")
      kubectl_pull
      break
      ;;
    "")
      echo "${red}Invalid Option ${magenta}CTL + C to quit${default}"
      ;;
  esac
done
